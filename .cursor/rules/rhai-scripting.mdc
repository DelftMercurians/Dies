---
globs: *.rhai
alwaysApply: false
---

# A Comprehensive Guide to Writing Rhai Strategies for Dies

This guide provides a comprehensive overview of the Dies Behavior Tree (BT) and Rhai Scripting system. It is designed to equip a coding agent with the knowledge necessary to write effective and intelligent strategies for the robots.

## 1. Introduction

### The Dies Behavior Tree (BT) & Rhai Scripting System

The Dies project uses a powerful combination of **Behavior Trees** to model robot behavior and the **Rhai scripting language** to define the logic within those trees. This allows for creating complex, dynamic, and even hot-reloadable behaviors in a declarative and easy-to-understand way.

### The Role of Rhai: Strategy vs. Skills

The core design principle is a clear separation of concerns:

- **Rust implements Skills**: These are the fundamental, atomic "building blocks" of robot behavior (e.g., `Kick`, `FetchBall`, `GoToPosition`). They are reusable, self-contained, and performant. They define _how_ a robot does something.
- **Rhai defines Strategy**: Rhai scripts compose these skills into high-level strategies and role assignments. The scripts define the "brain" of the robot, focusing on decision-making, coordination, and orchestration. They define _when_ and _why_ a robot does something.

### Modern Strategy Design Philosophy

The current Dies strategy system emphasizes:

- **High-level coordination through dynamic role assignment**: Use the role assignment system to make strategic decisions about who should do what
- **Simple, modular behavior trees**: Keep individual role behavior trees to 3-4 layers deep maximum
- **Clear role separation**: Define distinct roles like "striker", "waller", "harasser", "support" with focused responsibilities
- **Reactive coordination**: Let the assignment system handle coordination; individual behaviors focus on execution

---

## 2. Rhai Language Essentials for Dies

This section covers the core Rhai language features relevant to writing BT scripts.

### 2.1. Basic Syntax

- **Variables**: Declared with `let`. They are dynamically typed.
  ```rust
  let x = 42;
  let name = "droste";
  ```
- **Functions**: Declared with `fn`. They are essential for creating conditions and scorers. The last expression is implicitly returned.
  ```rust
  fn is_near_ball(s) {
      // 's' is the RobotSituation object
      let dist = (s.player.position - s.world.ball.position).norm();
      dist < 500.0
  }
  ```
- **Comments**: Use `//` for single-line comments and `/* ... */` for block comments.

### 2.2. Data Types

- **Primitives**:
  - `INT` (e.g., `42`, `-10`) - 64-bit signed integer.
  - `FLOAT` (e.g., `3.14`, `-0.5`) - 64-bit float.
  - `BOOL` (`true`, `false`).
  - `STRING` (e.g., `"a description"`).
- **Arrays**: An ordered list of items, enclosed in `[]`.
  ```rust
  let nodes = [FetchBall(), Kick()];
  ```
- **Maps**: A collection of key-value pairs, enclosed in `#{}`. Used for optional parameters.
  ```rust
  // Used for the 'options' parameter in GoToPosition
  let opts = #{ heading: 1.57, with_ball: true };
  ```

### 2.3. Control Flow

- **`if`/`else`**: Used for conditional logic inside functions.
  ```rust
  fn get_score(s) {
      let score = 100.0;
      if s.has_ball() {
          score += 50.0;
      } else {
          score -= 20.0;
      }
      return score;
  }
  ```
- **`switch`**: Matches a value against several cases. It is more efficient than a long `if/else` chain.
  ```rust
  switch state {
      1 => "one",
      2 | 3 => "two or three",
      _ => "other"
  }
  ```

### 2.4. Functions In-Depth

- **Anonymous Functions & Closures**: Defined with `|...| ...` syntax. They can "capture" variables from their defining scope. This is the primary way to define conditions and scorers inline.
  ```rust
  // A Guard using a closure as a condition
  Guard(|s| s.has_ball(), Kick())
  ```
- **Function Pointers**: A reference to a function, created with `Fn("function_name")` or by just using the function name as a variable.

  ```rust
  fn my_condition(s) { s.has_ball() }

  // These are equivalent
  Guard(my_condition, Kick())
  Guard(Fn("my_condition"), Kick())
  ```

### 2.5. Modules

- **`import`**: Scripts are modular. Use `import "path/to/module.rhai" as module_name;` to use functions from other files.
- **Project Script Structure**:
  - `strategies/main.rhai`: The main entry point.
  - `strategies/game_modes/`: Contains scripts for specific game states (`play.rhai`, `kickoff.rhai`).
  - `strategies/shared/`: Contains reusable logic.
    - `situations.rhai`: For condition functions (`Guard`s).
    - `utilities.rhai`: For helper functions.

Due to a bug in Rhai, imported functions cannot be used as function pointers (eg as conditions or scorers) -- in these cases they should be wrapped in an anonymous function `|s| util::my_condition(s)`.

---

## 3. Behavior Tree (BT) Fundamentals

### 3.1. Core Concepts

- **The "Tick"**: A BT is executed by "ticking" its root node. This happens on every frame.
- **Node Status**: Each node returns one of three statuses:
  - `Success`: The node's task is complete and successful.
  - `Failure`: The node's task failed.
  - `Running`: The node is still working and needs more ticks.

### 3.2. Node Types

- **Composite Nodes**: Control the flow of execution for their children.
  - `Select`: An **OR** gate. Tries children in order until one succeeds or is running. Fails if all children fail.
  - `Sequence`: An **AND** gate. Runs children in order. Fails if any child fails. Succeeds only if all children succeed.
  - `ScoringSelect`: Chooses which child to run based on a calculated score. The highest score wins.
- **Decorator Nodes**: Modify the behavior of a single child.
  - `Guard`: A conditional node. If its condition is true, it ticks its child. Otherwise, it fails.
  - `Semaphore`: A team coordination tool. Limits how many robots can run its child branch simultaneously.
- **Action Nodes (Skills)**: The leaves of the tree that perform actual robot actions (e.g., `Kick`, `GoToPosition`).

---

## 4. The Dies Scripting API Reference

This is the definitive reference for the functions and data available in Rhai scripts, derived directly from the Rust implementation.

### 4.1. Entry Points and Role Assignment

**Modern Entry Point (Recommended)**

Your `strategies/main.rhai` script should provide a `main()` function that returns a role assignment configuration:

```rust
fn main() {
    return AssignRoles([
        Role("striker")
            .score(|s| score_striker(s))
            .max(1)
            .behavior(|| build_striker_tree())
            .build(),

        Role("waller")
            .score(|s| score_waller(s))
            .min(1)
            .max(2)
            .behavior(|| build_waller_tree())
            .build(),

        Role("support")
            .score(|s| score_support(s))
            .min(1)
            .behavior(|| build_support_tree())
            .build()
    ]);
}
```

**Legacy Entry Points (Backward Compatibility)**

For backward compatibility, you can still provide direct behavior tree builders:

- `build_play_bt(player_id)`: For normal gameplay.
- `build_kickoff_bt(player_id)`: For kickoff situations.
- `build_penalty_bt(player_id)`: For penalty situations.

### 4.2. Role Assignment API

The role assignment system allows defining roles with constraints and automatic assignment based on scoring.

#### `AssignRoles(roles: Array) -> RoleAssignmentProblem`

Takes an array of `Role` objects and returns a role assignment configuration.

#### `Role(name: String) -> RoleBuilder`

Creates a role builder. Use the following methods to configure:

- `.score(|s| -> f64)` - **Required**. Scoring function; higher scores are better.
- `.min(count: Int)` - Minimum robots for this role (default: 0).
- `.max(count: Int)` - Maximum robots for this role (default: unlimited).
- `.count(count: Int)` - Exact count (sets min = max).
- `.require(|s| -> bool)` - Filter that must return true for eligibility.
- `.exclude(|s| -> bool)` - Filter that must return false for eligibility.
- `.behavior(|| -> BehaviorNod)` - **Required**. Behavior tree builder for this role.
- `.build() -> Role` - **Required**. Builds the role.

#### Example Role Assignment

```rust
fn main() {
    AssignRoles([
        // Goalkeeper - exactly one, must be robot 0
        Role("goalkeeper")
            .count(1)
            .score(|s| 100.0)
            .require(|s| s.player_id == 0)
            .behavior(|| build_goalkeeper_tree())
            .build(),

        // Striker - prefers robot closest to ball
        Role("striker")
            .max(1)
            .score(|s| {
                let ball_dist = s.distance_to_ball();
                200.0 - ball_dist
            })
            .exclude(|s| s.player_id == 0)
            .behavior(|| build_striker_tree())
            .build(),

        // Support - remaining robots
        Role("support")
            .min(1)
            .score(|s| 50.0 + s.hash_float() * 10.0)
            .exclude(|s| s.player_id == 0)
            .behavior(|| build_support_tree())
            .build()
    ])
}
```

### 4.3. The `RobotSituation` Context Object

Condition and scorer functions receive a single argument, typically named `s`, which is the `RobotSituation` object. It provides a snapshot of the world from the current robot's perspective.

**Top-Level Properties & Methods:**

- `s.player_id`: `PlayerId` of the current robot.
- `s.has_ball()`: `true` if the robot's breakbeam sensor detects the ball.
- `s.player`: `PlayerData` object for the current robot.
- `s.world`: The `World` object containing global state.

#### Extended World Query Methods

**Player Proximity Queries:**

- `s.closest_own_player_to_ball()`: Closest teammate to ball (excluding self).
- `s.closest_own_player_to_me()`: Closest teammate to current robot.
- `s.closest_own_player_to_position(pos)`: Closest teammate to position.
- `s.closest_opp_player_to_me()`: Closest opponent to current robot.
- `s.closest_opp_player_to_position(pos)`: Closest opponent to position.

**Distance Calculations:**

- `s.distance_to_ball()`: Distance to ball.
- `s.distance_to_player(player_id)`: Distance to specific player.
- `s.distance_to_position(pos)`: Distance to position.

**Geometry Calculations:**

- `s.distance_to_nearest_wall()`: Distance to closest field boundary.
- `s.distance_to_wall_in_direction(angle)`: Distance to boundary in direction.
- `s.get_own_goal_position()`: Position of own goal center.
- `s.get_opp_goal_position()`: Position of opponent goal center.
- `s.get_field_center()`: Field center (0, 0).
- `s.is_position_in_field(pos)`: Check if position is within field.
- `s.get_field_bounds()`: Map with field boundary coordinates.

**Field Zone Queries:**

- `s.is_in_penalty_area(pos)`: Check if in any penalty area.
- `s.is_in_own_penalty_area(pos)`: Check if in own penalty area.
- `s.is_in_opp_penalty_area(pos)`: Check if in opponent penalty area.
- `s.is_in_center_circle(pos)`: Check if in center circle.
- `s.is_in_attacking_half(pos)`: Check if in attacking half (x > 0).
- `s.is_in_defensive_half(pos)`: Check if in defensive half (x < 0).
- `s.distance_to_own_penalty_area()`: Distance to own penalty area.
- `s.distance_to_opp_penalty_area()`: Distance to opponent penalty area.

**Additional Field Positions:**

- `s.get_own_penalty_mark()`: Own penalty mark position.
- `s.get_opp_penalty_mark()`: Opponent penalty mark position.
- `s.get_own_goal_corners()`: Array of own goal corner positions.
- `s.get_opp_goal_corners()`: Array of opponent goal corner positions.
- `s.get_corner_positions()`: Array of all field corner positions.

**Global World Queries:**

- `s.find_own_player_min_by(scorer_fn)`: Teammate with minimum score.
- `s.find_own_player_max_by(scorer_fn)`: Teammate with maximum score.
- `s.find_opp_player_min_by(scorer_fn)`: Opponent with minimum score.
- `s.find_opp_player_max_by(scorer_fn)`: Opponent with maximum score.
- `s.filter_own_players_by(predicate_fn)`: Filter teammates by condition.
- `s.filter_opp_players_by(predicate_fn)`: Filter opponents by condition.
- `s.count_own_players_where(predicate_fn)`: Count teammates matching condition.
- `s.count_opp_players_where(predicate_fn)`: Count opponents matching condition.

**Player Collections:**

- `s.get_players_within_radius(center, radius)`: All players within radius.
- `s.get_own_players_within_radius(center, radius)`: Teammates within radius.
- `s.get_opp_players_within_radius(center, radius)`: Opponents within radius.

**Ray Casting and Prediction:**

- `s.cast_ray(from, to)`: Cast ray and return hit information.
- `s.predict_ball_position(time_seconds)`: Predict ball position.
- `s.predict_ball_collision_time()`: Time until ball hits boundary.

#### Data Structure Reference

**`World` Object (`Arc<TeamData>`)**

- `s.world.ball`: `BallData` object or `()` if not present.
- `s.world.own_players`: `Array` of `PlayerData` for your teammates.
- `s.world.opp_players`: `Array` of `PlayerData` for opponents.
- `s.world.game_state`: `GameStateData` object.
- `s.world.field_geom`: `FieldGeometry` object or `()` if not present.

**Data Structures:**

- **`PlayerData`**: `.id`, `.position`, `.velocity`, `.heading` (radians)
- **`BallData`**: `.position` (Vec2), `.velocity`, `.position3` (Vec3)
- **`Vec2` / `Vec3`**: `.x`, `.y`, (`.z`), plus methods below
- **`GameStateData`**: `.game_state`, `.us_operating`
- **`FieldGeometry`**: `.field_length`, `.field_width`, `.goal_width`, etc.

#### Vector Operations

**Vec2/Vec3 Methods:**

- `.norm()`: Length of vector
- `.unit()`: Normalized unit vector
- `.angle_to(other)`: Angle to another vector
- `.distance_to(other)`: Distance to another vector
- `.rotate(angle)`: Rotate by angle (radians)
- `.interpolate(other, t)`: Linear interpolation (t ∈ [0,1])
- `.halfway_to(other)`: Midpoint to another vector

**Vector Arithmetic Operators:**

```rust
let a = vec2(1.0, 2.0);
let b = vec2(3.0, 4.0);

// Vector addition/subtraction
let sum = a + b;        // vec2(4.0, 6.0)
let diff = b - a;       // vec2(2.0, 2.0)

// Scalar multiplication/division
let scaled = a * 2.0;   // vec2(2.0, 4.0)
let halved = a / 2.0;   // vec2(0.5, 1.0)

// Unary negation
let negated = -a;       // vec2(-1.0, -2.0)
```

### 4.4. Behavior Node Constructors

These functions create the structure of your BT.

- `Select(children: Array, [description: String]) -> BehaviorNode`
- `Sequence(children: Array, [description: String]) -> BehaviorNode`
- `Guard(condition_fn: FnPtr, child: BehaviorNode, cond_description: String) -> BehaviorNode`
- `Semaphore(child: BehaviorNode, id: String, max_count: INT, [description: String]) -> BehaviorNode`
- `ScoringSelect(children_scorers: Array, hysteresis_margin: FLOAT, [description: String]) -> BehaviorNode`
  - `children_scorers` is an array of maps: `[#{ node: ..., scorer: ... }, ...]`.

### 4.5. Skills (Action Nodes)

Skills are the actions your robot can perform. Many arguments can be **dynamic**, meaning you can provide either a static value or a callback function `|s| { ... }` that returns the value.

- `GoToPosition(target: Vec2 | FnPtr, [options: Map], [description: String])`
  - `options` map keys: `heading` (Float|FnPtr), `with_ball` (Bool|FnPtr), `avoid_ball` (Bool|FnPtr).
- `FaceAngle(angle: Float | FnPtr, [options: Map], [description: String])`
  - `options` map keys: `with_ball` (Bool|FnPtr).
- `FaceTowardsPosition(target: Vec2 | FnPtr, [options: Map], [description: String])`
  - `options` map keys: `with_ball` (Bool|FnPtr).
- `FaceTowardsOwnPlayer(player_id: INT | FnPtr, [options: Map], [description: String])`
  - `options` map keys: `with_ball` (Bool|FnPtr).
- `Kick([description: String])`
- `Wait(duration_secs: Float | FnPtr, [description: String])`
- `FetchBall([description: String])`
- `InterceptBall([description: String])`
- `ApproachBall([description: String])`
- `FetchBallWithHeadingAngle(angle_rad: Float | FnPtr, [description: String])`
- `FetchBallWithHeadingPosition(target: Vec2 | FnPtr, [description: String])`
- `FetchBallWithHeadingPlayer(player_id: INT | FnPtr, [description: String])`

### 4.6. Helper Functions

- `vec2(x: FLOAT, y: FLOAT) -> Vec2`: Creates a 2D vector.
- `to_string(id: PlayerId) -> String`: Converts a `PlayerId` to a string.
- `hash_float(id: PlayerId) -> FLOAT`: Returns a deterministic float [0.0, 1.0] from a player ID, useful for distributing players.

---

## 5. Strategy Design Patterns

### 5.1. Role-Based Strategy Design

**Recommended Approach**: Use the role assignment system for high-level coordination and keep individual role behaviors simple and focused.

#### Example Strategy Structure

```rust
fn main() {
    AssignRoles([
        Role("striker")
            .max(1)
            .score(|s| score_striker(s))
            .behavior(|| build_striker_tree()
            .build(),

        Role("waller")
            .min(1)
            .max(2)
            .score(|s| score_waller(s))
            .behavior(|| build_waller_tree()
            .build(),

        Role("harasser")
            .max(1)
            .score(|s| score_harasser(s))
            .behavior(|| build_harasser_tree()
            .build(),

        Role("support")
            .min(1)
            .score(|s| score_support(s))
            .behavior(|| build_support_tree()
            .build()
    ])
}

// Simple, focused behavior trees (3-4 layers max)
fn build_striker_tree() {
    Select([
        // Priority 1: Score if close to goal with ball
        Guard(|s| s.has_ball() && s.distance_to_opp_goal() < 2000.0,
            Sequence([
                FaceTowardsPosition(|s| s.get_opp_goal_position()),
                Kick()
            ]),
            "Close shot opportunity"
        ),

        // Priority 2: Get the ball
        FetchBall()
    ], "Striker behavior")
}

fn build_waller_tree() {
    Select([
        // Block passing lanes near our goal
        Guard(|s| s.is_in_defensive_half(s.world.ball.position),
            GoToPosition(|s| calculate_wall_position(s)),
            "Ball in defensive half"
        ),

        // Default position
        GoToPosition(|s| get_default_wall_position(s))
    ], "Waller behavior")
}
```

#### Scoring Functions Best Practices

```rust
fn score_striker(s) {
    let mut score = 50.0;  // Base score

    // Prefer robots closer to ball
    let ball_dist = s.distance_to_ball();
    score += (2000.0 - ball_dist.min(2000.0)) / 20.0;

    // Prefer robots in attacking position
    if s.is_in_attacking_half(s.player.position) {
        score += 20.0;
    }

    // Slight preference based on robot hash (for consistency)
    score += s.hash_float() * 5.0;

    return score;
}

fn score_waller(s) {
    let mut score = 40.0;  // Lower base score than striker

    // Prefer robots closer to our goal
    let goal_dist = s.distance_to_position(s.get_own_goal_position());
    score += (3000.0 - goal_dist.min(3000.0)) / 30.0;

    // Prefer robots not carrying ball
    if !s.has_ball() {
        score += 15.0;
    }

    return score;
}
```

### 5.2. Writing Conditions and Scorers

- **Conditions (`Guard`)**: Must be a function that takes `RobotSituation` (`s`) and returns a `BOOL`.

  ```rust
  fn is_ball_on_our_side(s) {
      s.is_in_defensive_half(s.world.ball.position)
  }
  Guard(is_ball_on_our_side, DefensiveAction())
  ```

- **Scorers (`ScoringSelect` and Role assignment)**: Must be a function that takes `RobotSituation` (`s`) and returns a `FLOAT`. Higher scores are preferred.
  ```rust
  fn score_attacker(s) {
      let ball_dist = s.distance_to_ball();
      return 1000.0 - ball_dist;  // Closer = higher score
  }
  ```

### 5.3. Team Coordination Patterns

#### Using Semaphores for Micro-Coordination

```rust
fn build_striker_tree() {
    Semaphore(
        Select([
            attack_sequence(),
            get_ball_sequence()
        ]),
        "ball_control",  // Unique semaphore ID
        1               // Only one robot can control ball
    )
}
```

#### Dynamic Position Calculation

```rust
fn calculate_wall_position(s) {
    let ball_pos = s.world.ball.position;
    let our_goal = s.get_own_goal_position();

    // Position between ball and goal
    let direction = (ball_pos - our_goal).unit();
    return our_goal + direction * 800.0;  // 800mm from goal
}

fn get_support_position(s) {
    let ball_pos = s.world.ball.position;

    // Find open space away from other robots
    let nearby_robots = s.get_players_within_radius(ball_pos, 1000.0);
    if nearby_robots.len() > 2 {
        // Move to flanking position
        return ball_pos + vec2(0.0, 1000.0);
    } else {
        // Stay close for support
        return ball_pos + vec2(-500.0, 0.0);
    }
}
```

### 5.4. Debugging and Development

Use the `print()` and `debug()` functions within your scripts. Their output is forwarded to the main application's `log`.

```rust
print(`Player ${s.player_id}: Ball is at ${s.world.ball.position}`);
debug(s.player); // Prints the full PlayerData struct

// Debug role assignment scores
fn score_striker(s) {
    let score = calculate_striker_score(s);
    print(`Player ${s.player_id} striker score: ${score}`);
    return score;
}
```

#### Performance Tips

- Keep behavior trees shallow (3-4 layers maximum)
- Use role assignment for coordination, not behavior tree complexity
- Cache expensive calculations in local variables
- Prefer simple conditions over complex ones

```rust
// Good: Simple, cached calculation
fn build_striker_tree(s) {
    let ball_pos = s.world.ball.position;
    let goal_pos = s.get_opp_goal_position();
    let has_clear_shot = s.cast_ray(ball_pos, goal_pos).hit == false;

    Select([
        Guard(|_| has_clear_shot, shoot_sequence()),
        approach_ball_sequence()
    ])
}

// Avoid: Complex nested calculations in conditions
Guard(|s| s.cast_ray(s.world.ball.position, s.get_opp_goal_position()).hit == false, ...)
```

print(`Player ${s.player_id}: Ball is at ${s.world.ball.position}`);
debug(s.player); // Prints the full PlayerData struct

```

```
