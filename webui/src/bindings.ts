/*
 Generated by typeshare 1.9.2
*/

/**
 * An angle in radians, always in (-pi, pi]. This type supports safe arithmetic
 * operations:
 * 
 * ```no_run
 * # use dies_core::Angle;
 * let a = Angle::from_degrees(90.0);
 * let b = Angle::from_degrees(45.0);
 * let c = a + b;
 * assert_eq!(c.degrees(), 135.0);
 * ```
 */
export type Angle = number;

export type PlayerId = number;

/** Runtime information about the active executor. */
export interface ExecutorInfo {
	/** Whether the executor is currently paused. */
	paused: boolean;
	/** The player IDs that are currently controlled manually. */
	manual_controlled_players: PlayerId[];
}

/** A single field arc -- eg. the center circle */
export interface FieldCircularArc {
	/** Readable name of the arc */
	name: string;
	/** Center of the arc, in dies coordinates */
	center: Vector2;
	radius: number;
	a1: number;
	a2: number;
	thickness: number;
}

/** A single field line segment */
export interface FieldLineSegment {
	/** Readable name of the line segment */
	name: string;
	/** Start Vector2 of the line segment, in dies coordinates */
	p1: Vector2;
	/** End Vector2 of the line segment, in dies coordinates */
	p2: Vector2;
	/** Thickness of the line segment, in mm */
	thickness: number;
}

/** The field geometry. */
export interface FieldGeometry {
	/** Field length (distance between goal lines) in mm */
	field_length: number;
	/** Field width (distance between touch lines) in mm */
	field_width: number;
	/** Goal width (distance inner edges of goal posts) in mm */
	goal_width: number;
	/** Goal depth (distance from outer goal line edge to inner goal back) in mm */
	goal_depth: number;
	/** Boundary width (distance from touch/goal line centers to boundary walls) in mm */
	boundary_width: number;
	/** Generated line segments based on the other parameters */
	line_segments: FieldLineSegment[];
	/** Generated circular arcs based on the other parameters */
	circular_arcs: FieldCircularArc[];
}

/** Setup for a player in a scenario. */
export interface PlayerPlacement {
	/** Initial position of the player. If `None`, any position is acceptable. */
	position?: Vector2;
	/** Initial yaw of the player. If `None`, any yaw is acceptable. */
	yaw?: Angle;
}

/** Setup for the ball in a scenario. */
export type BallPlacement = 
	/** Ball is placed at a specific position. */
	| { type: "Position", data: Vector3 }
	/** Ball is placed at any position. */
	| { type: "AnyPosition",  }
	/** No ball is required. */
	| { type: "NoBall",  };

/** Information about a scenario. */
export interface ScenarioInfo {
	own_player_placements: PlayerPlacement[];
	opponent_player_placements: PlayerPlacement[];
	ball_placement: BallPlacement;
	/** Position tolerance for player and ball positions in mm. */
	tolerance: number;
	/** Yaw tolerance for players in rad */
	yaw_tolerance: number;
}

/** A struct to store the player state from a single frame. */
export interface PlayerData {
	/**
	 * Unix timestamp of the recorded frame from which this data was extracted (in
	 * seconds). This is the time that ssl-vision received the frame.
	 */
	timestamp: number;
	/** The player's unique id */
	id: PlayerId;
	/** Unfiltered position as reported by vision */
	raw_position: Vector2;
	/** Position of the player filtered by us in mm, in dies coordinates */
	position: Vector2;
	/** Velocity of the player in mm/s, in dies coordinates */
	velocity: Vector2;
	/**
	 * Yaw of the player, in radians, (`-pi`, `pi`), where `0` is the positive
	 * x direction, and `pi/2` is the positive y direction.
	 */
	yaw: Angle;
	/** Angular speed of the player (in rad/s) */
	angular_speed: number;
}

/** A struct to store the ball state from a single frame. */
export interface BallData {
	/**
	 * Unix timestamp of the recorded frame from which this data was extracted (in
	 * seconds). This is the time that ssl-vision received the frame.
	 */
	timestamp: number;
	/** Position of the ball filtered by us, in mm, in dies coordinates */
	position: Vector3;
	/** Velocity of the ball in mm/s, in dies coordinates */
	velocity: Vector3;
}

/** The game state, as reported by the referee. */
export type GameState = 
	| { type: "Unknown",  }
	| { type: "Halt",  }
	| { type: "Timeout",  }
	| { type: "Stop",  }
	| { type: "PrepareKickoff",  }
	| { type: "BallReplacement", data: Vector2 }
	| { type: "PreparePenalty",  }
	| { type: "Kickoff",  }
	| { type: "FreeKick",  }
	| { type: "Penalty",  }
	| { type: "PenaltyRun",  }
	| { type: "Run",  };

export interface GameStateData {
	/** The state of current game */
	game_state: GameState;
	/**
	 * If we are the main party currently performing tasks in the state.
	 * true for symmetric states(halt stop run timout)
	 */
	us_operating: boolean;
}

/** A struct to store the world state from a single frame. */
export interface WorldData {
	own_players: PlayerData[];
	opp_players: PlayerData[];
	ball?: BallData;
	field_geom?: FieldGeometry;
	current_game_state: GameStateData;
	duration: number;
}

export interface WorldUpdate {
	world_data: WorldData;
}

/** Runtime information about the active executor. */
export interface ExecutorInfoResponse {
	info?: ExecutorInfo;
}

/** The current mode of the UI - either simulation or live. */
export enum UiMode {
	Simulation = "Simulation",
	Live = "Live",
}

/** The current status of the executor. */
export type ExecutorStatus = 
	| { type: "None",  }
	| { type: "StartingScenario", data: ScenarioInfo }
	| { type: "RunningExecutor", data: {
	scenario: string;
}}
	| { type: "Failed", data: string };

/** The current status of the UI. */
export interface UiStatus {
	is_live_available: boolean;
	ui_mode: UiMode;
	executor: ExecutorStatus;
}

/** A command from the frontend to the backend. */
export type UiCommand = 
	| { type: "SetManualOverride", data: {
	player_id: PlayerId;
	manual_override: boolean;
}}
	| { type: "OverrideCommand", data: {
	player_id: PlayerId;
	command: PlayerOverrideCommand;
}}
	| { type: "SetPause", data: boolean }
	| { type: "StartScenario", data: {
	scenario: ScenarioType;
}}
	| { type: "Stop",  };

export interface PostUiCommandBody {
	command: UiCommand;
}

export interface PostUiModeBody {
	mode: UiMode;
}

/** An override command for a player for manual control. */
export type PlayerOverrideCommand = 
	/** Do nothing */
	| { type: "Stop",  }
	/** Move the robot to a globel position and yaw */
	| { type: "MoveTo", data: {
	position: Vector2;
	yaw: Angle;
	dribble_speed: number;
	arm_kick: boolean;
}}
	/** Move the robot with velocity in local frame */
	| { type: "LocalVelocity", data: {
	velocity: Vector2;
	angular_velocity: number;
	dribble_speed: number;
	arm_kick: boolean;
}}
	/** Move the robot with velocity in global frame */
	| { type: "GlobalVelocity", data: {
	velocity: Vector2;
	angular_velocity: number;
	dribble_speed: number;
	arm_kick: boolean;
}}
	/** Engage the kicker */
	| { type: "Kick", data: {
	speed: number;
}}
	/** Discharge the kicker safely */
	| { type: "DischargeKicker",  };

export type UiWorldState = 
	| { type: "Loaded", data: WorldData }
	| { type: "None",  };

export type Vector2 = [number, number];
export type Vector3 = [number, number, number];
export type ScenarioType = string;